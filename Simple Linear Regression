#importing packages
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
%matplotlib inline
import wget

#downloading data file
url='https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/FuelConsumptionCo2.csv'
store='-O FuelConsumption.csv'
wget.download(url,store)

#Reading data
df=pd.read.csv("FuelConsumption.csv")
df.head()

#Data Exploration
df.describe()

#Selecting feature
cdf=df[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB','CO2EMISSIONS']]
cdf.head(9)

#Some plots for visualization of data
viz=cdf[['CYLINDERS', 'ENGINESIZE', 'CO2EMISSIONS', 'FUELCONSUMPTION_COMB']]
viz.hist()
plt.show()
cdf.hist()
plt.show()

plt.scatter(cdf.FUELCONSUMPTION_COMB, cdf.CO2EMISSIONS, color='blue')
plt.xlabel('Fuel Consumption')
plt.ylabel('Emission')
plt.show()

plt.scatter(cdf.ENGINESIZE, cdf.CO2EMISSIONS, color='blue')
plt.xlabel('Engine size')
plt.ylabel('Emission')
plt.show()

#Creating train and test datasets

msk=np.random.rand(len(df))<0.8
train=cdf[msk]
test=cdf[~msk]

#Train Data Distribution

plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS, color='blue')
plt.xlabel('Engine Size')
plt.ylabel('Emission')
plt.show()

#SIMPLE REGRESSION MODEL

from sklearn import linear_model
regr=linear_model.LinearRegression()
train_x=np.asanyarray(train[['ENGINESIZE']])
train_y=np.asanyarray(train[['CO2EMISSIONS']])
regr.fit(train_x, train_y)

print("Coefficients:", regr.coef_)
print("Intercept: ", regr.intercept_)

#plot outputs
plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS, color='blue')
plt.plot(train_x,regr.coef_[0][0]*train_x + regr.intercept_[0],'-r')
plt.xlabel('Engine Size')
plt.ylabel('Emission')
plt.title('Emission vs engine size with regression  line')
plt.show()

#EVALUATION WITH TEST DATASETS
from skylearn.metrics import r2_score
test_x=np.asanyarray(test[['ENGINESIZE']])
test_y=np.asanyarray(test[['CO2EMISSIONS']])
test_y_= regr.predict(test_x, test_y)

print("Mean Absoulte Error: %.2f" %np.mean(np.absolute(test_y_-test_y)) )
print("Residual Sum of squares: %.2f" %np.mean((test_y_-test_y)**2) )
print("R2 Score of the model: %.2f" %r2_score(test_y_,test_y))

#END
